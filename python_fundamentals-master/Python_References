

'''

__ Python __
Journal Dev - https://github.com/journaldev/journaldev/tree/master/Python-3#python-modules
Python w3schools - w3schools.com/python/default.asp
The Python Tutorial - https://docs.python.org/3/tutorial/index.html
Python Tutorial - https://www.zentut.com/python-tutorial/
Learn Python Programming - https://www.programiz.com/python-programming
Python Tutorials for Beginners - https://thepythonguru.com/
Python, How to Think Like a Computer Scientist - https://runestone.academy/runestone/books/published/thinkcspy/index.html
Jetbrains Academy - https://hyperskill.org/onboarding/?track=python (login, select Map and then choose from Python, Java streams etc)
A Byte of Python - https://python.swaroopch.com/
Think Python (can buy from Amazon or use online book version) - https://www.amazon.com/gp/product/1491939362/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&camp=1789&creative=9325&creativeASIN=1491939362&linkCode=as2&tag=greenteapre01-20&linkId=QGWNVBOEV6JIMH4Y
Think Python - http://greenteapress.com/thinkpython2/html/thinkpython2004.html#sec32
Python Online Visualisation Tool - http://www.pythontutor.com/visualize.html#mode=edit
Automate the Boring Stuff - https://automatetheboringstuff.com/
Automate the Boring Stuff - Chapter 1 - https://automatetheboringstuff.com/2e/chapter1/
Invent Your Own Computer Games with Python, 4th Edition - https://inventwithpython.com/invent4thed/
Invent With Scratch - https://inventwithscratch.com/
Geeks for Geeks - https://www.geeksforgeeks.org/python-program-to-find-largest-number-in-a-list/
Snakify - https://snakify.org/en/ - Teach Python 3 and web design with 200+ exercises



__ Vim __
13 Linux Terminal Shortcuts - https://linuxhandbook.com/linux-shortcuts/

__ Linux __
Linux Commands - http://www.linuxcommand.org/index.php
Linux, Basic Vim Commands - https://linuxhandbook.com/basic-vim-commands/
Learn Enough Command Line Tutorials - https://www.learnenough.com/command-line-tutorial/basics
Command Line Crash Course - https://learnpythonthehardway.org/book/appendixa.html

__ Github __
Introduction to GitHub - https://lab.github.com/githubtraining/introduction-to-github


__ Git __
Command Line Cheat Sheet - https://www.git-tower.com/blog/command-line-cheat-sheet/
Learn Version Control With Git - https://www.git-tower.com/learn/git/ebook/en/command-line/introduction
Learn Git - https://www.codecademy.com/learn/learn-git
What Is Version Control - https://www.atlassian.com/git/tutorials/what-is-version-control
Learn Git Branching - https://learngitbranching.js.org/




__ Identity Operators __
- https://wsvincent.com/python-wat-integer-cache/
- https://www.journaldev.com/22925/python-id

Python Operators Precedence Table
- https://www.tutorialspoint.com/python/operators_precedence_example.htm

__ Datatypes __
__Strings__
Remove white space from a string - https://www.journaldev.com/23763/python-remove-spaces-from-string

__ More Datatypes / Collections / Arrays __

__ Lists - Aliasing __
Aliasing - https://runestone.academy/runestone/books/published/thinkcspy/Lists/Aliasing.html
More on Lists - https://docs.python.org/3/tutorial/datastructures.html#more-on-lists
Nested Lists - Nested Lists - https://www.learnbyexample.org/python-nested-list/


__ Tuples __
5.3 Tuples and Sequences - https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences
Python - Tuples - https://www.tutorialspoint.com/python/python_tuples.htm


__ Sets __

Sets - https://snakify.org/en/lessons/sets/
Sets in Python - https://realpython.com/python-sets/
5.4 Sets - https://docs.python.org/3/tutorial/datastructures.html#sets
Sets Mathematics -  https://en.wikipedia.org/wiki/Set_(mathematics)#Basic_operations

__ Dictionaries __

5.5. Dictionaries - https://docs.python.org/3/tutorial/datastructures.html#dictionaries
Dictionary Methods - https://www.programiz.com/python-programming/methods/dictionary/copy
Python Dictionaries - https://www.w3schools.com/python/python_dictionaries.asp


__ Flow Control - Conditionals and Loops

Control Flow - https://python.swaroopch.com/control_flow.html

__ String Formatting __
The new f-strings in Python 3.6 - https://cito.github.io/blog/f-strings/
Format Specification Mini-Language - https://docs.python.org/3/library/string.html#format-specification-mini-language
string — Common string operations - https://docs.python.org/3/library/string.html#format-specification-mini-language


__ PyPi - Python Package Index __
 Find, install and publish Python packages with the Python Package Index.
 PyPI helps you find and install software developed and shared by the Python community.
  - https://pypi.org/

_ Some Python Packages _

 - Beautiful Soup
 - pip install --upgrade certifi


__Getting HTML data from a website__
https://www.youtube.com/watch?v=ng2o98k983k - https://www.youtube.com/watch?v=ng2o98k983k
Performing HTTP requests in Python using urllib - https://gist.github.com/Akash-Ansari/e0d868f147c39ecf327215f06b2b27d1
Python Urllib Module - Urllib module is the URL handling module for python. - https://www.geeksforgeeks.org/python-urllib-module/
[SSL: CERTIFICATE_VERIFY_FAILED] error - Answered here: https://stackoverflow.com/questions/50236117/scraping-ssl-certificate-verify-failed-error-for-http-en-wikipedia-org#50243316

Performing HTTP requests in Python using urllib - https://gist.github.com/Akash-Ansari/e0d868f147c39ecf327215f06b2b27d1
Python Urllib Module - Urllib module is the URL handling module for python. - https://www.geeksforgeeks.org/python-urllib-module/
[SSL: CERTIFICATE_VERIFY_FAILED] - Answered here: https://stackoverflow.com/questions/50236117/scraping-ssl-certificate-verify-failed-error-for-http-en-wikipedia-org#50243316
Web Scraping Python Tutorial for Beginners - https://intellipaat.com/blog/tutorial/python-tutorial/python-web-scraping-tutorial/
Using BeautifulSoup to parse HTML and extract press briefings URLs - http://www.compjour.org/warmups/govt-text-releases/intro-to-bs4-lxml-parsing-wh-press-briefings/#extracting-text-from-soup
Beautiful Soup Documentation - Beautiful Soup is a Python library for pulling data out of HTML and XML files - https://www.crummy.com/software/BeautifulSoup/bs4/doc/


__ Libraries & Modules & Functions __
Python 3 Module of the Week - https://pymotw.com/3/
PyMOTW-3 is a series of articles written by Doug Hellmann to demonstrate how to use the modules of the Python 3 standard library.
Python's Built-in Functions - https://docs.python.org/3.8/library/functions.html#enumerate
requests - The requests library is the de facto standard for making HTTP requests in Python - https://realpython.com/python-requests/
Python requests - https://realpython.com/python-requests/
HTTP Request Methods - https://www.w3schools.com/tags/ref_httpmethods.asp
maths - refer to 'math' in the Python library for more details on the available math functions - https://docs.python.org/3/library/math.html
statistics -
urllib -



__ Python Modules __

Python Module index - https://docs.python.org/3/py-modindex.html
Journaldev - https://www.journaldev.com/14329/python-modules

__ Docstrings __
docstrings - https://www.python.org/dev/peps/pep-0257/

__ Variable Scope __
Variable scope and lifetime -  https://python-textbok.readthedocs.io/en/1.0/Variables_and_Scope.html#variable-scope-and-lifetime
Variables and scope - https://python-textbok.readthedocs.io/en/1.0/Variables_and_Scope.html#more-about-scope-crossing-boundaries
Global and local scope of Python variables - https://matthew-brett.github.io/teaching/global_scope.html
A beginner's guide to Python's namespaces, scope resolution, and the LEGB rule - https://nbviewer.jupyter.org/github/rasbt/python_reference/blob/master/tutorials/scope_resolution_legb_rule.ipynb

__ Namespace __ & __dict__
using print(object.__dict__) returns details of the namespace for an object

__ Type Hinting __
How to Use Static Type Checking in Python 3.6 - https://medium.com/@ageitgey/learn-how-to-use-static-type-checking-in-python-3-6-in-10-minutes-12c86d72677b
How to use type hints in python 3.6? - https://stackoverflow.com/questions/41356784/how-to-use-type-hints-in-python-3-6
Optional static typing for Python 3 and 2 (PEP 484) - https://github.com/python/mypy
Type Hinting in Python is not enforced (Python is dynamically typed unlike Java which is statically typed e.g. int x = 10 identifies
the type of variable x is, in this case an int .  However, there are some external packages,
 e.g. mypy (see link above) that make it possible to enforce static typing in python.


__ Object Oriented Programming __
Python Objects - https://www.effbot.org/zone/python-objects.htm
Class Objects - https://docs.python.org/3.6/tutorial/classes.html#class-objects
Classes and objects - http://greenteapress.com/thinkpython2/html/thinkpython2016.html
Understanding Class and Instance Variables in Python 3 - https://www.digitalocean.com/community/tutorials/understanding-class-and-instance-variables-in-python-3
Class and Instance Variables - https://www.digitalocean.com/community/tutorials/understanding-class-and-instance-variables-in-python-3
Understanding Class Inheritance - https://www.digitalocean.com/community/tutorials/understanding-class-inheritance-in-python-3


__ TDD - Test Driven Development __
Test-Driven Web Development with Python - https://www.obeythetestinggoat.com/pages/book.html#toc
pytest - Python testing tool - https://docs.pytest.org/en/latest/
Python Testing - https://pythontesting.net/meta/info-needed-to-start-testing/#more-50843

__ Unit Testing __
Unittest — Unit testing framework - https://docs.python.org/3/library/unittest.html#module-unittest
Getting Started With Testing in Python - https://realpython.com/python-testing/#more-advanced-testing-scenarios
Unit Testing & Test-Driven Development - https://python-3-patterns-idioms-test.readthedocs.io/en/latest/UnitTesting.html
pytest: helps you write better programs - https://docs.pytest.org/en/latest/
What info do you need to start testing? - https://pythontesting.net/
Test-Driven Development with Python - https://www.obeythetestinggoat.com/pages/book.html#toc
Productive Pytest with PyCharm - Jetbrains video, check YouTube
Pytest Webinar - https://github.com/okken/pycharm_2018_Feb/blob/master/README.md
Coverage (for Test Coverage) - https://coverage.readthedocs.io/en/coverage-5.1/cmd.html
Python test tools - https://wiki.python.org/moin/PythonTestingToolsTaxonomy
100% Test Coverage in Python - https://www.youtube.com/watch?v=7BJ_BKeeJyM
An introduction to code coverage, Atlassian - https://www.atlassian.com/continuous-delivery/software-testing/code-coverage
Atlassian - CI/CD - Software testing for continuous delivery - https://www.atlassian.com/continuous-delivery/software-testing
Atlassian - Automated software testing - https://www.atlassian.com/continuous-delivery/software-testing/automated-testing
Corey M Schafer tutorials:
- https://github.com/CoreyMSchafer/code_snippets/tree/master/Python-Unit-Testing
- https://www.youtube.com/watch?v=6tNS--WetLI&t=378s
Jetbrains Documentation Pytest - https://www.jetbrains.com/help/pycharm/pytest.html

__ Podcasts __
Python Bytes podcasthttps://pythonbytes.fm/
Jetbrains resources - https://www.jetbrains.com/resources/webinars/#product=all

__ Virtual Environments __
Configure a Virtual Environment in PyCharm - https://www.jetbrains.com/help/pycharm/creating-virtual-environment.html

__ Tox __
Automate Build, Test and Release Workflows with Tox. Tox is a python based generic automation tool.
Tox - https://tox.readthedocs.io/en/latest/index.html
Tox tutorial & Github link - https://www.youtube.com/watch?v=PrAyvH-tm8E - https://gitlab.com/obestwalter/tox-webinar

__Flask__
The Flask Mega-Tutorial - https://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-i-hello-world

__Assigning Default Values to Functions or Class __init__ parameters__
Python Default Arguments - https://www.programiz.com/python-programming/function-argument

__ Methods __

__ Class Methods __
There can be 3 types of methods within a class:
 - a regular instance method that takes (self) as an argument
 - a class method that takes (cls) as an argument
 - a static method that takes neither self or cls as an argument - use decorator @staticmethod
Tutorial 3: classmethods and static methods - https://www.youtube.com/watch?v=rq8cL2XMM5M
 - use decorator @classmethod to declare a method as a class method

__ Static Methods __
- these generally don't take any arguments from the instance or class i.e. they can be standalone functions/methods
- use the decorator @staticmethod to highlight a method is a static method

__add__
Overloading __add__ method - see

__ Property Decorators - Getters, Setters, and Deleters __
https://www.youtube.com/watch?v=jCzT9XFZ5bw


__ file I/O __
7.2. Reading and Writing File - https://docs.python.org/3/tutorial/inputoutput.html

__ JetBrains Pycharm Documentation __
Pytest - https://www.jetbrains.com/help/pycharm/pytest.html

__ Exceptions __
Built-in Exceptions - https://docs.python.org/3/library/exceptions.html#bltin-exceptions
8. Errors and Exceptions - https://docs.python.org/3/tutorial/errors.html#errors-and-exceptions
Exception Hierarchy - https://docs.python.org/3/library/exceptions.html#exception-hierarchy

__ List Comprehensions __
Understanding List Comprehensions in Python 3 - https://www.digitalocean.com/community/tutorials/understanding-list-comprehensions-in-python-3
Python List Comprehension - https://www.programiz.com/python-programming/list-comprehension

__ List Comprehensions & Generators for Data Processing __
Using List Comprehensions and Generator Expressions For Data Processing - https://www.youtube.com/watch?time_continue=20&v=_6U1XoxyyBY&feature=emb_title
List Comprehensions and Generator Expressions - https://pycon2018.trey.io/


___ itertools __
itertools — Functions creating iterators for efficient looping - https://docs.python.org/3/library/itertools.html#itertools.product
Itertools in Python 3, By Example - https://realpython.com/python-itertools/
itertools — Iterator Functions - https://pymotw.com/3/itertools/index.html

__ Regex __
Regular Expressions: Regexes in Python, Part 1 - https://realpython.com/regex-python/
Regular Expressions 101 - https://regex101.com/
RegExr - https://regexr.com/
Regular Expression HOWTO - https://docs.python.org/3/howto/regex.html
PyCon 2017 Regular Expressions Tutorial - http://pycon2017.regex.training/
RegexOne, Learn Regular Expressions with simple, interactive exercises - https://regexone.com/lesson/introduction_abcs
Python Regular Expression - Exercises, Practice, Solution - https://www.w3resource.com/python-exercises/re/
Regular Expressions Tutorial - https://pycon2016.regex.training/exercises
Python RegEx - https://www.w3schools.com/python/python_regex.asp
Making sense of generators, coroutines, and “yield from” in Python - https://lerner.co.il/2020/05/08/making-sense-of-generators-coroutines-and-yield-from-in-python/?utm_source=drip&utm_medium=email&utm_campaign=Some+Python+reading+and+watching+for+this+Sunday

___ Aggregate Functions __
enumerate - To count off or name one by one
 - https://docs.python.org/3.8/library/functions.html#enumerate

__ Django __
Django Tutorial - https://www.geeksforgeeks.org/django-tutorial/?ref=leftbar-rightbar

__ Decorators __
Decorators for Functions and Methods - https://www.python.org/dev/peps/pep-0318/
Primer on Python Decorators - https://realpython.com/primer-on-python-decorators/
Decorators - https://www.python-course.eu/python3_decorators.php


__ Lambda Expressions __
Map, Filter, Lambda, and List Comprehensions - http://www.u.arizona.edu/~erdmann/mse350/topics/list_comprehensions.html

__ Data Science __
Python Data Science Tutorials - http://python-ds.com/

__ REST and Restful API's __
The Open API initiative  - https://www.openapis.org/
REST API Tutorial - https://www.restapitutorial.com/
Webopedia - https://www.webopedia.com/TERM/H/HTTP.html
Basics of Computer Networking - https://www.geeksforgeeks.org/basics-computer-networking/
Working of ISO-OSI Model - https://www.geeksforgeeks.org/working-of-iso-osi-model/?ref=leftbar-rightbar
HTTP request methods - https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods
Add JSON formatter extension to browser - https://chrome.google.com/webstore/detail/json-formatter/bcjindcccaagfpapjjmafapmmgkkhgoa?hl=en
Python Requests Module - https://www.w3schools.com/PYTHON/module_requests.asp
How To Get Started With the Requests Library in Python - https://www.digitalocean.com/community/tutorials/how-to-get-started-with-the-requests-library-in-python
HTTP Request Methods - https://www.w3schools.com/tags/ref_httpmethods.asp
Send HTTP Requests in Python - https://code-maven.com/http-requests-in-python
HTTP Request Methods - https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods
HTTP Status codes -

__ Building an API __
How to Build an API From The Ground Up - https://swagger.io/blog/api-development/how-to-build-an-api/
OpenAPI Specification - https://swagger.io/specification/
API Design by Martin Fowler - https://www.martinfowler.com/tags/API%20design.html
How to Build an API - https://apiary.io/how-to-build-api#architectural-style
Documenting APIs Tutorial - https://idratherbewriting.com/learnapidoc/docapis_introtoapis.html

__ JSON __
Python Parse JSON – dumps, loads - https://www.journaldev.com/16016/python-parse-json-dumps-loads
JSON encoder and decoder - https://docs.python.org/3/library/json.html
Introducing JSON - https://www.json.org/json-en.html

__ XML __
xml.etree.ElementTree - https://docs.python.org/3/library/xml.etree.elementtree.html

__ Databases __
SQL Alchemy - https://www.sqlalchemy.org/
install SQL Alchemy in venv - pip install sqlalchemy


__ Web-Socket API vs RESTful API __
WebSockets vs REST: Understanding the Difference - https://www.pubnub.com/blog/websockets-vs-rest-api-understanding-the-difference/
The WebSocket API (WebSockets) - https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API
How to Transfer Files in the Network using Sockets in Python - https://www.thepythoncode.com/article/send-receive-files-using-sockets-python



__ WebSocket frameworks __
The WebSocket API (WebSockets) - https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API
 - the above contains a lot of tools that can be used in building web-socket API's
WebSocket frameworks
Socket Programming in Python - https://www.geeksforgeeks.org/socket-programming-python/
Why you need a framework with your WebSockets - https://hackernoon.com/why-you-need-a-framework-with-your-websockets-98330827e3e
Why use WebSockets? - https://www.fullstackpython.com/websockets.html

__ Capstone Projects __
- add projects here

__ Scrum references and exam __
Suggested Reading for Professional Scrum Master - https://www.scrum.org/resources/suggested-reading-professional-scrum-master
What is Scrum: An Introduction to the Scrum Framework - https://s3.amazonaws.com/static.scrum.org/Webinar+Slides/What+is+Scrum_Small.pdf
Scrum values poster - https://www.scrum.org/resources/scrum-values-poster
The Scrum Guide - https://www.scrumguides.org/docs/scrumguide/v2017/2017-Scrum-Guide-US.pdf#zoom=100

__ Coding Exercises __
https://code-exercises.com/blog/2020/05/23/best-code-kata-ever.html
load Twitter API data into database - https://towardsdatascience.com/streaming-twitter-data-into-a-mysql-database-d62a02b050d6

__ Tips - Guide for Using PyCharm __
https://www.jetbrains.com/pycharm/guide/tips/

__ Coding Nomads Lab API __
http://demo.codingnomads.co:8081/tasks_api/swagger-ui.html#/user-controller/getUsersUsingGET

__ YAML __
https://yaml.org/
YAML is a human friendly data serialization standard for all programming languages.
PyYAML is a YAML parser and emitter for Python - https://pyyaml.org/wiki/PyYAML
PyYAML Documentation - https://pyyaml.org/wiki/PyYAMLDocumentation
pip install PyYAML


__ Javascript __
JavaScript: Introduction - https://idratherbewriting.com/javascript/

__ Using Web Sockets in Python __
How to Transfer Files in the Network using Sockets in Python - https://www.thepythoncode.com/article/send-receive-files-using-sockets-python

__ Postman __
Postman Learning Centre - https://learning.postman.com/docs/postman/sending-api-requests/requests/

__ API Documentation Tutorial __
Documenting APIs: A guide for technical writers and engineers - https://idratherbewriting.com/learnapidoc/
 - the above is a really good intro not only to writing API documents but also API's in general
Learn API Technical Writing: JSON and XML for Writers - https://www.udemy.com/course/api-documentation-1-json-and-xml/


__ Finding Open Source Projects to Contribute To __
Start here, it gives good simple advice - https://idratherbewriting.com/learnapidoc/docapis_find_open_source_project.html
https://help.github.com/en/github/getting-started-with-github/finding-ways-to-contribute-to-open-source-on-github
testing help wanted Github - https://github.com/search?l=&p=3&q=testing+label%3A%22help+wanted%22&ref=advsearch&type=Issues
API Documentation help wanted Github - https://github.com/search?q=API+documentation+label%3A%22help+wanted%22&type=Issues
How to choose (and contribute to) your first open source project - https://github.com/collections/choosing-projects
Contribute to open-source projects through documentation - https://www.mapzen.com/blog/open-source-docs/

Other places to try for open source projects apart from Github:
- Trending GitHub projects
- Crowdforge
- Up for Grabs
- Bus Factor
- Code Triage
- Changelog
- 24-hour Pull Requests
- Programmableweb.com API directory


__ Python GUI Programming __
Python - GUI Programming (Tkinter) - https://www.tutorialspoint.com/python/python_gui_programming.htm

__ Appium Python Client __
Appium-Python-Client 1.0.1 - https://pypi.org/project/Appium-Python-Client/
Visual Testing with Applitools, Appium, and Amazon AWS Device Farm - https://applitools.com/blog/visual-testing-appium-amazon/?